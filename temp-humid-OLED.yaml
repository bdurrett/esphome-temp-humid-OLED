# These substitutions allow the end user to override certain values
substitutions:
  name: "temphumid"
  friendly_name: "TempHumidOLED"
  area_name: "UnknownRoom"
  display_in_fahrenheit: "true"                 # visual display only, calculation and sensor to HA always in Celsius
  temperature_calibration_offset: '0'           # step 1, degrees added to temperature (negative to subtract)
  temperature_calibration_multiply: '1'         # step 2, multiplier for temperature  
  humidity_calibration_offset: '0'              # step 1, percent (100 basic points) added to humidity (negative to subtract)
  humidity_calibration_multiply: '1'            # step 2, multiplier for humidity

esphome:
  name: "${name}"
# Automatically add the mac address to the name
# so you can use a single firmware for all devices
  name_add_mac_suffix: false

# When everything loaded, trigger screen saver timer 
  on_boot:
    priority: -100
    then:
      - script.execute: screen_saver

# This will allow for (future) project identification,
# configuration and updates.
  project:
    name: bdurrett.esphome-temp-humid-OLED
    version: "1.0"

esp8266:
  board: d1_mini

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://bdurrett/esphome-temp-humid-OLED/temp-humid-OLED.yaml

wifi:
  # Set up a wifi access point using the device name above
  ap:
    password: "MY5EKR17"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:


##########################################################
# Most projects should not remove anything from above here
# and should just modify the name, project name/version 
# and git url for the dashboard_import
##########################################################


# Sets up the improv via serial client for Wi-Fi provisioning.
# Handy if your device has a usb port for the user to add credentials when they first get it.
improv_serial:

globals:
  - id: iteration
    type: int
    restore_value: no
    initial_value: '0'
  - id: display_off
    type: boolean
    restore_value: no
    initial_value: 'false'

binary_sensor:
  - platform: gpio
    id: sleepbutton
    pin: D6                 # D6, GPIO12
    name: "Sleep"
    filters:
      - delayed_on: 5ms     # debounce
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - lambda:
            if( id(display_off) ){
              id(display_off) = false;
              id(oled).turn_on();
              id(screen_saver).execute();
            }
            else{
              id(display_off) = true;
              id(oled).turn_off();
            }
        - logger.log: "Button pressed"

sensor:
  - platform: dht
    pin: D5                 # D5, GPIO14
    temperature:
      id: temperature
      name: "Temperature"
      filters:
        - offset: ${temperature_calibration_offset}
        - multiply: ${temperature_calibration_multiply}
      unit_of_measurement: "°C"  
    humidity:
      id: humidity
      name: "Humidity"
      filters:
        - offset: ${humidity_calibration_offset}
        - multiply: ${humidity_calibration_multiply}
    update_interval: 60s
    model: DHT11
    
i2c:
  sda: D1                     # D1, GPIO5
  scl: D2                     # D2, GPIO4

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 14

graph:
  # Show bare-minimum auto-ranged graph
  - id: single_temperature_graph
    sensor: temperature
    duration: 24h
    x_grid: 6h
    width: 128
    height: 48

# See wifi connection bug https://community.home-assistant.io/t/esphome-wifi-auth-expired/443790/20
display:
  - platform: ssd1306_i2c
    id: oled
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 10s   # For whatevs reason, this (or at least 2s) fixes the wifi connection problem 
    lambda: |-
      if( ( id(iteration)++ % 2) == 0 ){
        it.print(0, 0, id(roboto), "${area_name}" );
        if( ${display_in_fahrenheit} ){
          it.printf(0, 14, id(roboto), "Temp: %.1f°F", id(temperature).state * (9.0/5.0) + 32.0 );
        }
        else{
          it.printf(0, 14, id(roboto), "Temp: %.1f°C", id(temperature).state );
        }
        it.printf(0, 28, id(roboto), "Humid: %.1f%%", id(humidity).state);
      }
      else{
        it.print(0, 0, id(roboto), "24H Temperatures");
        it.graph(0, 16, id(single_temperature_graph));
      }

script:
  - id: screen_saver
    mode: restart     # Restart the countdown if called multiple times
    then:
      - delay: 5 min
      - lambda: 
          if( id(display_off) == false ){
              id(display_off) = true;
              id(oled).turn_off();
          } 
